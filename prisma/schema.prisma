generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id           Int            @id @default(autoincrement())
  name              String
  phone             String?
  email             String         @unique
  password          String
  created_at        DateTime       @default(now())
  last_login        DateTime?
  paid              Boolean        @default(false)
  profile           Profile?
  subscription      Subscriptions?
  sent_messages     Chat[]         @relation("SentMessages")
  received_messages Chat[]         @relation("ReceivedMessages")
}

model Profile {
  profile_id       Int        @id @default(autoincrement())
  user             Users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          Int        @unique
  gender           String?    // Added gender field
  birthday         DateTime?  // Added birthday field
  curr_height      Float?     // Renamed from curr_height
  curr_weight      Float?
  goal_weight      Float?     // Added goal weight
  fitness_level    FitnessLevel? // Added fitness level enum
  fitness_goals    Json?      // JSON array for multiple fitness goals
  profile_pic      String?   @db.LongText // Renamed from photo for clarity
  progress         String?    @db.Text
  nutrition        String?    @db.Text
  workouts         Workout[]
  activities       Activity[]
  progressRecords  Progress[]
  intakes          Intake[]
  
}

// Added enum for fitness level
enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Nutrition {
  nutrition_id Int      @id @default(autoincrement())
  food_item    String
  category     String?
  calories     Float?
  protein      Float?
  carbs        Float?
  fat          Float?
  fiber        Float?
  sugar        Float?
  sodium       Float?
  cholesterol  Float?
  intakes      Intake[]
}

model Intake {
  intake_id    Int       @id @default(autoincrement())
  profile      Profile   @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id   Int
  intake_date  DateTime  @default(now())
  type_meal    String
  quantity     Int       @default(1)
  nutrition    Nutrition @relation(fields: [nutrition_id], references: [nutrition_id], onDelete: Cascade)
  nutrition_id Int
}

model Exercise {
  exercise_id   Int        @id @default(autoincrement())
  title         String
  description   String?    @db.Text
  type          String?
  equipment     String?
  level         String?
  rating        Float?
  youtube_video String?
  body_part     String?
  workouts      Workout[]
  analyses      Analysis[]
}

model Workout {
  workout_id   Int       @id @default(autoincrement())
  profile      Profile   @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id   Int
  workout_date DateTime  @default(now())
  start_time   DateTime?
  exercise     Exercise  @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade)
  exercise_id  Int
  duration     Int?
  activity     Activity?
  analysis     Analysis?
}

model Activity {
  activity_id Int      @id @default(autoincrement())
  profile     Profile  @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id  Int
  steps       Int      @default(0)
  minutes     Int      @default(0)
  workout     Workout? @relation(fields: [workout_id], references: [workout_id], onDelete: SetNull)
  workout_id  Int?     @unique
}

model Analysis {
  analysis_id Int      @id @default(autoincrement())
  exercise    Exercise @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade)
  exercise_id Int
  workout     Workout  @relation(fields: [workout_id], references: [workout_id], onDelete: Cascade)
  workout_id  Int      @unique
}

model Subscriptions {
  subscription_id  Int      @id @default(autoincrement())
  user             Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          Int      @unique
  cardholder       String
  card_number      String
  exp_date         DateTime
  cvv              String
  date_of_purchase DateTime @default(now())
  plan_purchased   String
}

model Progress {
  progress_id    Int      @id @default(autoincrement())
  profile        Profile  @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id     Int
  record_date    DateTime @default(now())
  height         Float?
  weight         Float?
  calories_burnt Float?
  fat_percentage Float?
}

model Chat {
  chat_id     Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  message     String
  timestamp   DateTime @default(now())
  sender      Users    @relation("SentMessages", fields: [sender_id], references: [user_id])
  receiver    Users    @relation("ReceivedMessages", fields: [receiver_id], references: [user_id])
}