generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Change to "postgresql" if using PostgreSQL
  url      = env("DATABASE_URL")
}

model Users {
  user_id      Int            @id @default(autoincrement())
  name         String
  phone        String?
  email        String         @unique
  password     String
  created_at   DateTime       @default(now())
  last_login   DateTime?
  paid         Boolean        @default(false)
  profile      Profile?
  subscription Subscriptions?
}

model Profile {
  profile_id       Int        @id @default(autoincrement())
  user             Users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          Int        @unique
  curr_weight      Float?
  curr_height      Float?
  total_steps      Int        @default(0)
  calories_burnt   Float      @default(0.0)
  photo            String?
  exercise_history String?
  progress         String?
  nutrition        String?
  active_plan      String?
  workouts         Workout[]
  activities       Activity[]
  progressRecords  Progress[]
  intakes          Intake[]
}

model Nutrition {
  nutrition_id Int      @id @default(autoincrement())
  food_item    String
  category     String?
  calories     Float?
  protein      Float?
  carbs        Float?
  fat          Float?
  fiber        Float?
  sugar        Float?
  sodium       Float?
  cholesterol  Float?
  intakes      Intake[]
}

model Intake {
  intake_id    Int       @id @default(autoincrement())
  profile      Profile   @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id   Int
  intake_date  DateTime  @default(now())
  type_meal    String
  quantity     Int       @default(1)
  nutrition    Nutrition @relation(fields: [nutrition_id], references: [nutrition_id], onDelete: Cascade)
  nutrition_id Int
}

model Exercise {
  exercise_id   Int        @id @default(autoincrement())
  title         String
  description   String?
  type          String?
  equipment     String?
  level         String?
  rating        Float?
  youtube_video String?
  body_part     String?
  workouts      Workout[]
  analyses      Analysis[]
}

model Workout {
  workout_id   Int       @id @default(autoincrement())
  profile      Profile   @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id   Int
  workout_date DateTime  @default(now())
  start_time   DateTime?
  exercise     Exercise  @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade)
  exercise_id  Int
  duration     Int? // in minutes
  activity     Activity?
  analysis     Analysis?
}

model Activity {
  activity_id Int      @id @default(autoincrement())
  profile     Profile  @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id  Int
  steps       Int      @default(0)
  minutes     Int      @default(0)
  workout     Workout? @relation(fields: [workout_id], references: [workout_id], onDelete: SetNull)
  workout_id  Int?     @unique
}

model Analysis {
  analysis_id Int      @id @default(autoincrement())
  exercise    Exercise @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade)
  exercise_id Int
  workout     Workout  @relation(fields: [workout_id], references: [workout_id], onDelete: Cascade)
  workout_id  Int      @unique // Ensure it's unique for a one-to-one relation
}

model Subscriptions {
  subscription_id  Int      @id @default(autoincrement())
  user             Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          Int      @unique
  cardholder       String
  card_number      String
  exp_date         DateTime
  cvv              String
  date_of_purchase DateTime @default(now())
  plan_purchased   String
}

model Progress {
  progress_id    Int      @id @default(autoincrement())
  profile        Profile  @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id     Int
  record_date    DateTime @default(now())
  height         Float?
  weight         Float?
  calories_burnt Float?
  fat_percentage Float?
}
